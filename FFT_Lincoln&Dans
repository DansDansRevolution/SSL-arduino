#include "arduinoFFT.h"

arduinoFFT FFT = arduinoFFT(); 

const uint16_t samples = 128; //This value MUST ALWAYS be a power of 2
const double samplingFrequency = 2000; //Hz, must be less than 10000 due to ADC

unsigned int sampling_period_us;
unsigned long microseconds;

double v1Real[samples];
double v1Imag[samples];
double v2Real[samples];
double v2Imag[samples];
double v3Real[samples];
double v3Imag[samples];
double v1AMP;
double v2AMP;
double v3AMP;

#define MIC1 A3
#define MIC2 A4
#define MIC3 A5
#define LED1 7
#define LED2 8
#define LED3 9

//#define SCL_FREQUENCY 0x02

void setup()
{
  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV32 |    
                   ADC_CTRLB_RESSEL_10BIT;         

  ADC->SAMPCTRL.reg = 0x00;
  
  sampling_period_us = round(1000000*(1.0/samplingFrequency));
  Serial.begin(115200);
  while(!Serial);

  pinMode(7, OUTPUT);
  pinMode(8, OUTPUT);
  pinMode(9, OUTPUT);
}



void loop()
{
  microseconds = micros();
    for(int i = 0; i < samples; i++)
    {
        v1Real[i] = analogRead(MIC1);
        v1Imag[i] = 0;
        v2Real[i] = analogRead(MIC2);
        v2Imag[i] = 0;
        v3Real[i] = analogRead(MIC3);
        v3Imag[i] = 0;
        while(micros() - microseconds < sampling_period_us){
        
        }
        microseconds += sampling_period_us;
    }
      FFT.Windowing(v1Real, samples, FFT_WIN_TYP_HAMMING, FFT_FORWARD);  /* Weigh data */
      FFT.Compute(v1Real, v1Imag, samples, FFT_FORWARD); /* Compute FFT */
      FFT.ComplexToMagnitude(v1Real, v1Imag, samples); /* Compute magnitudes */
      FFT.Windowing(v2Real, samples, FFT_WIN_TYP_HAMMING, FFT_FORWARD);  /* Weigh data */
      FFT.Compute(v2Real, v2Imag, samples, FFT_FORWARD); /* Compute FFT */
      FFT.ComplexToMagnitude(v2Real, v2Imag, samples); /* Compute magnitudes */
      FFT.Windowing(v3Real, samples, FFT_WIN_TYP_HAMMING, FFT_FORWARD);  /* Weigh data */
      FFT.Compute(v3Real, v3Imag, samples, FFT_FORWARD); /* Compute FFT */
      FFT.ComplexToMagnitude(v3Real, v3Imag, samples); /* Compute magnitudes */
      v1Real[0] = 0;
      v1Real[1] = 0;
      v1Real[2] = 0;
      v2Real[0] = 0;
      v2Real[1] = 0;
      v2Real[2] = 0;
      v3Real[0] = 0;
      v3Real[1] = 0;
      v3Real[2] = 0;
      double v1Peak = FFT.MajorPeak(v1Real, samples, samplingFrequency);
      double v2Peak = FFT.MajorPeak(v2Real, samples, samplingFrequency);
      double v3Peak = FFT.MajorPeak(v3Real, samples, samplingFrequency);
//      PrintVector(v1Real, (samples >> 1), SCL_FREQUENCY);
//      PrintVector(v2Real, (samples >> 1), SCL_FREQUENCY);
//      PrintVector(v3Real, (samples >> 1), SCL_FREQUENCY);
      
//  if (300 < v1Peak && v1Peak < 500) {
//    digitalWrite(6, HIGH);
//  } else {
//    digitalWrite(6, LOW);
//  }
//  if (300 < v2Peak && v2Peak < 500) {
//    digitalWrite(7, HIGH);
//  } else {
//   digitalWrite(7, LOW);
//  }
//  if (300 < v3Peak && v3Peak < 500) {
//    digitalWrite(8, HIGH);
//  } else {
//    digitalWrite(8, LOW);
//  }
  
  for (int i = 0; i < samples; i++)
  {
    if (((i * samplingFrequency) / samples) > v1Peak - (samplingFrequency / samples) && ((i * samplingFrequency) / samples) < v1Peak + (samplingFrequency / samples)) {
      v1AMP = v1Real[i];
    }
    if (((i * samplingFrequency) / samples) > v2Peak - (samplingFrequency / samples) && ((i * samplingFrequency) / samples) < v2Peak + (samplingFrequency / samples)) {
      v2AMP = v2Real[i];
    }
    if (((i * samplingFrequency) / samples) > v3Peak - (samplingFrequency / samples) && ((i * samplingFrequency) / samples) < v3Peak + (samplingFrequency / samples)) {
      v3AMP = v3Real[i];
    }
  }


  if (max(max(v1AMP, v2AMP),v3AMP) == v1AMP) {
    digitalWrite(LED1, HIGH);
    digitalWrite(LED2, LOW);
    digitalWrite(LED3, LOW);
  } else if (max(v2AMP, v3AMP) == v2AMP) {
      digitalWrite(LED1, LOW);
      digitalWrite(LED2, HIGH);
      digitalWrite(LED3, LOW);
    } else {
        digitalWrite(LED1, LOW);
        digitalWrite(LED2, LOW);
        digitalWrite(LED3, HIGH);
    }

  
  delay(10);
}



//void FFTComp()
//{
//  FFT.Windowing(vReal, samples, FFT_WIN_TYP_HAMMING, FFT_FORWARD);  /* Weigh data */
//  FFT.Compute(vReal, vImag, samples, FFT_FORWARD); /* Compute FFT */
//  FFT.ComplexToMagnitude(vReal, vImag, samples); /* Compute magnitudes */
//  PrintVector(vReal, (samples >> 1), SCL_FREQUENCY);
////}



//void PrintVector(double *vData, uint16_t bufferSize, uint8_t scaleType)
//{
//  for (uint16_t i = 0; i < bufferSize; i++)
//  {
//    double abscissa;
//    
//    abscissa = ((i * 1.0 * samplingFrequency) / samples);
//    
//    Serial.print(abscissa, 6);
//    if(scaleType == SCL_FREQUENCY)
//      Serial.print("Hz");
//    Serial.print(" ");
//    Serial.println(vData[i], 4);
//  }
//  Serial.println();
//}
